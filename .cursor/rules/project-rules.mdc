---
description: TypeScriptの学習用リポジトリに関するルールとナレッジベース
globs: ["**/*.ts", "**/*.tsx", "**/*.md"]
alwaysApply: true
---

# TypeScript Practice プロジェクト知識ベース

## プロジェクトルール
- 日本語でのレスポンス
- TypeScriptの技術用語を厳密に正確に使用
- 雛形と回答の区別を維持
- テストの検証ロジックを理解して適切な実装を提案
- 基本課題と発展課題の区別を意識
- 日本語のコメントと明確な指示に従う

## プロジェクト構造
- **src/**: 学習者が編集する雛形ファイル
- **answers/**: 完成した回答例
- **dist/**: トランスパイル後のJavaScriptファイル
- **テストファイル**: 各課題に対応するテスト（`*.test.ts`）

## セクション内容
1. **1-overview**: TypeScript入門（基本的な構文と型）
2. **2-values-types-variables**: 
   - 値・型・変数の基礎
   - ユーザー情報（オブジェクト型とプロパティ）
   - 配列操作と統計計算（平均値、エラーハンドリング）
3. **6-import-export-require**: モジュールシステムとエクスポート/インポート

## テスト方法と検証
1. 雛形ファイルを編集
2. `npm run test -- PATH/TO/TEST.test.ts` で検証
3. `npm run build && node dist/PATH/TO/FILE.js` で実行結果確認
4. 回答例を参照可能

## 命名規則と開発標準
- 日本語のコメントによる詳細な説明と指示
- キャメルケースの関数名・変数名
- 詳細な検証ロジックを含むテストファイル
- 基本課題と発展課題による段階的な学習
- 学習効果を高めるための詳細なコメント

## 技術用語と表現方針
- TypeScriptの技術用語は正確な定義に従って使用する
- JavaScript・TypeScript固有の概念は正確な用語で表現する
- 型システム関連の用語は公式ドキュメントに準拠した表現を使用する
- データ構造やアルゴリズムに関する専門用語は正確に使用する
- 変換プロセスや実行環境に関する用語も技術的に正確な表現を用いる
