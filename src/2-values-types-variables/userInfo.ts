// オブジェクト型と型定義の基礎を学習するファイル

/**
 * 課題1: ユーザーを表す型を定義する
 *
 * 以下の手順で実装してください：
 * 1. User型を定義し、以下のプロパティを持たせてください
 *   - name: 文字列型
 *   - age: 数値型
 *   - isPremium: 真偽値型
 */

/**
 * 課題2: ユーザーオブジェクトの作成
 *
 * 以下の手順で実装してください：
 * 1. 上記で定義したUser型を使って、userAという変数にユーザー情報を格納してください
 *   - 名前: 任意の名前（文字列）
 *   - 年齢: 任意の年齢（数値）
 *   - プレミアム状態: true または false
 */

/**
 * 課題3: ユーザー情報を出力する関数の実装
 *
 * 以下の手順で実装してください：
 * 1. User型の引数を受け取り、ユーザー情報をコンソールに出力する関数printUserInfoを実装してください
 * 2. 出力形式: "[名前] ([年齢]歳) - Premium: [プレミアム状態]"
 * 3. 戻り値の型はvoidとしてください
 */

/**
 * 課題4: 関数の呼び出し
 *
 * 以下の手順で実装してください：
 * 1. 作成したprintUserInfo関数を呼び出し、userAの情報を出力してください
 */

/**
 * 課題5: 型推論とany型の挙動を確認する
 *
 * 以下の手順で実装してください：
 * 1. 型注釈なしでユーザーオブジェクトuserBを作成してください
 *    - 名前: "Bob"（文字列）
 *    - 年齢: 30（数値）
 *    - isPremium: false（真偽値）
 * 2. userBのプロパティにカーソルを合わせて、TypeScriptの型推論を確認してください
 * 3. userB.age = "30歳"; のように文字列を代入しようとして、エラーになるか確認してください
 * 4. let userC: any = { ... }; と書き直し、同様に "30歳" を代入した場合の挙動を確認してください
 *
 * 注意: このコードはトランスパイルエラーを確認するためのものです。
 * 実際の課題実装時には、エラーの確認後にコメントアウトしてください。
 */

/**
 * 発展課題（任意）: オプショナルプロパティを持つ型の定義
 *
 * 以下の手順で実装してください：
 * 1. ExtendedUser型を定義し、User型の全プロパティに加えて、
 *    オプショナルなroleプロパティ（文字列型）を持たせてください
 * 2. ExtendedUser型を使ったオブジェクトを2つ作成してください（一方はroleあり、もう一方はroleなし）
 * 3. ExtendedUser型の情報を出力する関数を実装し、作成した2つのオブジェクトの情報を出力してください
 */

/**
 * 発展課題2（任意）: インデックスシグネチャを使った動的プロパティ
 *
 * 以下の手順で実装してください：
 * 1. FlexibleObject型を定義し、文字列のキーに対して文字列または数値の値を持つ型としてください
 * 2. FlexibleObject型を使ったオブジェクトを作成し、様々なプロパティを動的に追加してください
 * 3. 作成したオブジェクトの内容をコンソールに出力してください
 */
