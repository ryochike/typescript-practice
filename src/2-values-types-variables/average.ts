// average.ts
// 配列を操作して平均値を計算するサンプルコード

/**
 * 課題1: 数値配列の平均値を計算する関数の実装
 *
 * 以下の手順で実装してください：
 * 1. number[]型の引数valuesを受け取り、その平均値を計算して返す関数getAverageを実装してください
 * 2. 配列の要素の合計を計算するには、reduceメソッドの使用を検討してください
 * 3. 戻り値はnumber型にしてください
 */

// ここにgetAverage関数を実装してください

/**
 * 課題2: エラーハンドリングの追加
 *
 * 以下の手順で実装してください：
 * 1. 上記で実装したgetAverage関数に、空配列が渡された場合のエラーハンドリングを追加してください
 * 2. 空配列の場合は、適切なエラーメッセージを含むErrorをスローしてください
 */

// 必要に応じて、上記のgetAverage関数を修正してください

/**
 * 課題3: 関数のテスト
 *
 * 以下の手順で実装してください：
 * 1. 複数の数値を含む配列を定義し、getAverage関数でその平均値を計算してコンソールに出力してください
 * 2. 負の数を含む配列でもテストしてください
 * 3. try-catchブロックを使用して、空配列を渡した場合のエラーハンドリングをテストしてください
 */

// ここにテストコードを実装してください

/**
 * 課題4: 配列の型推論を確認する
 *
 * 以下の手順で実装してください：
 * 1. 型注釈なしの空配列numbersを宣言し、push()メソッドで数値を追加してください
 * 2. numbersの型をエディタで確認してください（any[]と推論されるはず）
 * 3. 型注釈付きの空配列numbers2: number[] = []を宣言し、同様に値を追加してください
 * 4. 最初から要素を持つ配列numbers3 = [10, 20]を宣言し、型を確認してください
 * 5. numbers3.push("30")を試して、型エラーが発生するか確認してください
 *
 * 注意: このコードはトランスパイルエラーを確認するためのものです。
 * 実際の課題実装時には、エラーの確認後にコメントアウトしてください。
 */

// ここに課題4を実装してください（最終的にはコメントアウトすることを推奨）

/**
 * 発展課題1（任意）: 文字列配列の平均長を計算する関数
 *
 * 以下の手順で実装してください：
 * 1. string[]型の引数を受け取り、配列内の文字列の平均長を計算して返す関数getAverageStringLengthを実装してください
 * 2. mapメソッドを使用して文字列の長さを取得し、既に実装したgetAverage関数を活用してください
 * 3. 空配列の場合のエラーハンドリングも実装してください
 */

// ここに発展課題1を実装してください

/**
 * 発展課題2（任意）: 中央値（メディアン）を計算する関数
 *
 * 以下の手順で実装してください：
 * 1. number[]型の引数を受け取り、その中央値を計算して返す関数getMedianを実装してください
 * 2. 中央値は、ソートされた配列の中央の値（要素数が奇数の場合）、または中央の2つの値の平均（要素数が偶数の場合）です
 * 3. 空配列の場合のエラーハンドリングも実装してください
 */

// ここに発展課題2を実装してください

/**
 * 発展課題3（任意）: 複数の型が混在する配列の処理
 *
 * 以下の手順で実装してください：
 * 1. 数値と文字列が混在する配列mixedArray: (number | string)[]を宣言してください
 * 2. 型ガード（typeof演算子）を使用して、数値と文字列を適切に処理する関数processItemsを実装してください
 *    - 数値の場合: 2倍した値を返す
 *    - 文字列の場合: 文字数を返す
 * 3. 関数の戻り値を使って、処理結果の平均値を計算して出力してください
 */

// ここに発展課題3を実装してください
