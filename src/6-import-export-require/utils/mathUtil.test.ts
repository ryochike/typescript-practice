/**
 * mathUtil.tsモジュールのテストファイル
 *
 * このファイルは、数学関数のテストケースを自分で考えて実装するための
 * テンプレートです。
 *
 * Vitestを使ったテストの書き方を学びましょう。
 */

import { describe, expect, it } from "vitest";
// mathUtilモジュールをインポートしてください
// TODO: mathUtilモジュールから必要な関数をインポート

describe("add関数のテスト", () => {
  // TODO: 以下のようなテストケースを考えて実装してください
  // - 正の数の加算（例: 2 + 3 = 5）
  // - 負の数の加算（例: -1 + -2 = -3）
  // - 小数の加算（例: 0.1 + 0.2 ≈ 0.3）
  // - ゼロとの加算（例: 0 + 5 = 5）

  it("サンプルテスト - このテストは必ず失敗します（自分で実装してください）", () => {
    // このサンプルは、実際のテストを書くための参考です
    // expect(add(2, 3)).toBe(5);
    expect(true).toBe(false); // このテストは必ず失敗します。自分でテストを実装してください
  });
});

describe("multiply関数のテスト", () => {
  // TODO: 以下のようなテストケースを考えて実装してください
  // - 正の数の乗算（例: 2 * 3 = 6）
  // - 負の数の乗算（例: -2 * 3 = -6, -2 * -3 = 6）
  // - ゼロとの乗算（例: 0 * 5 = 0）
});

describe("divide関数のテスト", () => {
  // TODO: 以下のようなテストケースを考えて実装してください
  // - 正の数の除算（例: 6 / 3 = 2）
  // - 負の数の除算（例: -6 / 3 = -2, -6 / -3 = 2）
  // - 小数が出る除算（例: 5 / 2 = 2.5）
  // - エラーケース: ゼロでの除算（例外がスローされるべき）
  /* ヒント: エラーのテスト方法
  it('ゼロで割ると例外がスローされるべき', () => {
    expect(() => divide(10, 0)).toThrow();
    // または特定のエラーメッセージをテスト
    // expect(() => divide(10, 0)).toThrow('ゼロで除算できません');
  });
  */
});

describe("subtract関数のテスト", () => {
  // TODO: 以下のようなテストケースを考えて実装してください
  // - 正の数の減算（例: 5 - 3 = 2）
  // - 負の結果になる減算（例: 3 - 5 = -2）
  // - 負の数との減算（例: -3 - -5 = 2）
});

// オプション: デフォルトエクスポートのテスト
describe("mathUtilのデフォルトエクスポートのテスト", () => {
  // TODO: デフォルトエクスポートされたオブジェクトのテスト
  // ヒント: default exportをテストするには別のインポート方法が必要です
});

/**
 * テストの実行方法:
 *
 * npm test src/6-import-export-require/utils/mathUtil.test.ts
 *
 * ヒント:
 * - 回答例は answers/6-import-export-require/utils/mathUtil.test.ts にあります
 * - まずは自分でテストケースを考えて実装してみましょう
 */
